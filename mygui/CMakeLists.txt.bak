##############################################################################
# CMake
##############################################################################

cmake_minimum_required(VERSION 2.8.0)
project(mygui)

##############################################################################
# Catkin
##############################################################################

# qt_build provides the qt cmake glue, roscpp the comms for a default talker
find_package(catkin REQUIRED COMPONENTS
    qt_build
    roscpp
    std_msgs
    cv_bridge
    image_transport
    message_generation)
include_directories(${catkin_INCLUDE_DIRS})
# Use this to define what the package will export (e.g. libs, headers).
# Since the default here is to produce only a binary, we don't worry about
# exporting anything. 
catkin_package()


find_package(OpenCV REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/include")
set (CMAKE_PREFIX_PATH "/home/odroid/qt5/qtbase/~/qt5/build/lib/cmake/Qt5")
find_package(Qt5 5.8 REQUIRED COMPONENTS Widgets PrintSupport)
#find_package(Qt5PrintSupport REQUIRED)
#find_package(Qt5Widgets REQUIRED)
#include_directories(${Qt5Widgets_INCLUDE_DIRS})
##############################################################################
# Qt Environment
##############################################################################

# this comes from qt_build's qt-ros.cmake which is automatically 
# included via the dependency call in package.xml
#find_package(Qt4 REQUIRED)
#rosbuild_prepare_qt4(QtCore QtGui) # Add the appropriate components to the component list here
##############################################################################
# Sections
##############################################################################
#set(CMAKE_AUTOMOC ON)
file(GLOB QT_FORMS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ui/*.ui)
file(GLOB_RECURSE QT_MOC RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} FOLLOW_SYMLINKS include/*.hpp)
file(GLOB_RECURSE QT_MOC RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} FOLLOW_SYMLINKS include/*.h) #SOS MAKE SURE H FILES ARE INCLUDED HERE SEE http://stackoverflow.com/questions/19761767/qt-5-cmake-fails-with-undefined-reference-to-vtable-on-hello-world-with-inc-sr
file(GLOB_RECURSE EXTRA_FILES */*.h)
add_custom_target(${PROJECT_NAME}_OTHER_FILES ALL WORKING_DIRECTORY ${PROJECT_SOURCE_DIR} SOURCES ${EXTRA_FILES})
QT5_WRAP_UI(QT_FORMS_HPP ${QT_FORMS})
QT5_WRAP_CPP(QT_MOC_HPP ${QT_MOC})

##############################################################################
# Sources
##############################################################################

file(GLOB_RECURSE QT_SOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} FOLLOW_SYMLINKS src/*.cpp)

##############################################################################
# Binaries
##############################################################################
add_executable(mygui ${QT_SOURCES} ${QT_FORMS_HPP} ${QT_MOC_HPP})
#target_link_libraries(mygui ${QT_LIBRARIES} ${catkin_LIBRARIES} ${OpenCV_LIBRARIES} /home/odroid/qcustomplot/qcustomplot-sharedlib/sharedlib-compilation/libqcustomplot.so)
#target_compile_definitions(mygui PRIVATE QCUSTOM_PLOT_COMPILE_LIBRARY=1)
target_link_libraries(mygui ${QT_LIBRARIES} ${catkin_LIBRARIES} ${OpenCV_LIBRARIES} Qt5::Widgets Qt5::PrintSupport Gl)
#QT5_USE_MODULES(mygui PrintSupport)
#install(TARGETS mygui RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION})

